type: PythonCodeQuestion
title: More baseball statistics
id: graph
value: 100
timeout: 10
data_files:

    - "media/batting.csv"
    - "media/salaries.csv"

prompt: |
    # Introduction
    Once again, we will be using the Lahman Baseball Database in this week's assignment. We want to create a graph to visualize the relationship between how many RBIs a player has in a given year and their salary that same year. Unfortunately, Lahman provides the relevant data in two separate files. We will need to join the data to create the desired graph.

    We have provided you with two CSV files named [batting.csv](repocur:pdfs/batting.csv) and [salaries.csv](repocur:pdfs/salaries.csv). The first, of course, contains the annual batting performance data from last week's assignment. The second contains salary data for all Major League Baseball players dating back to the year 1985. You should download both files and place them in the same directory as your Python code for this assignment. *Caution!* Your program should work with any similarly formatted csv files.

    # Reading in the data
    First, you will need to read in the data files. In batting.csv, We are interested in *three* columns this week: "playerID", "yearID" and "RBI". Your program should skip the header in the file and completely ignore any lines where the RBI column does not contain a digit. 

    You should create an accumulator dictionary called "playeryear2rbis" that maps a tuple of the playerID string and yearID string to an integer representing the number of RBIs for that player and year. Just like last week, as you iterate through input the file, you should update the "playeryear2rbis" dictionary. 

    In salaries.csv, we are also interested in three columns: "playerID","yearID", and "salary". You should create a dictionary called "playeryear2salary" which maps a tuple of the playerID string and yearID string to an integer representing the player's salary for that year.

    # Preparing the data
    After creating the two dictionaries, we need to join the data together and prepare it for plotting. We need to create two lists to hold the x and y values in our plot. We will call them "salaries" and "rbis". You should iterate over all of the keys of playeryear2salary and use these keys to find the salary and rbi data for each player and each year. You should skip any player,year combinations that are not represented in the playeryear2rbis dictionary (in other words, the data for that player and year must be in both dictionaries.)

    When you have the salary and rbi data for a given player and year, you should append them to the appropriate list. Once this loop is completed, you should end up with two lists of integers that have the exact same size. Each element in "salaries" will be an integer containing a player's salary for a certain year. The corresponding element in rbis (the one with the same index) will have the RBIs of that same player and year.

    # Plotting the data
    Plot the data using the pyplot "plot" function. Make sure to import matplotlib.pyplot as plt. On the x axis, plot the "salaries". On the y axis, plot the "rbis." Use the format string "k.", to plot the points as black dots. Title your plot "Salary vs. RBIs in MLB". Label the X axis "Salary" and the Y axis "RBIs".

    # Submitting your solution
    After you finish writing your code, you can paste it into the box below and click "Submit answer for feedback." You can do this as many times as you like. DO NOT try to write your code here. Debugging it will be very difficult. You should write and test your code on your own computer. Once you are satisfied with your feedback, you can click "Submit assignment" above to finalize your assignment.

setup_code: |
    def open(filename,mode="r"):
        try:
            data=data_files["media/"+filename]
        except KeyError:
            raise IOError("File not found")
        from io import StringIO
        return StringIO(data.decode("utf-8"))

names_for_user: [open]

names_from_user: [playeryear2salary,playeryear2rbis,salaries,rbis,plt]

test_code: |
    import matplotlib.pyplot as plt
    import csv
    import numpy as np

    def read_salary(file_name):
        f=open(file_name)
        reader=csv.DictReader(f)
        player2salary={}
        for row in reader:
            playerid=row["playerID"]
            year=row["yearID"]
            salary=row["salary"]
            if salary.isdigit():
                if (playerid,year) not in player2salary:
                    player2salary[playerid,year]=int(salary)
                else:
                    player2salary[playerid,year]+=int(salary)
        f.close()
        return player2salary

    def read_rbi(file_name):
        f=open(file_name)
        reader=csv.DictReader(f)
        player2RBI={}
        for row in reader:
            playerid=row["playerID"]
            year=row["yearID"]
            rbi=row["RBI"]
            if rbi.isdigit():
                if (playerid,year) not in player2RBI:
                    player2RBI[playerid,year]=int(rbi)
                else:
                    player2RBI[playerid,year]+=int(rbi)
        f.close()
        return player2RBI    
    
    def grade():
        if not type(playeryear2salary) is dict:
            feedback.finish(0,"playeryear2salary must be a dictionary.")
        if not type(playeryear2rbis) is dict:
            feedback.finish(0,"playeryear2rbis must be a dictionary.")

        cplayeryear2salary=read_salary("salaries.csv")
        cplayeryear2rbis=read_rbi("batting.csv")

        ckeys=list(cplayeryear2rbis.keys())
        ckeys.sort(reverse=True)
        skeys=list(playeryear2rbis.keys())
        skeys.sort(reverse=True)
        if skeys != ckeys:
            if len(skeys)>len(ckeys):
                feedback.add_feedback("playeryear2rbis dictionary has too many keys.")
                feedback.add_feedback("Are you sure you skipped the header line?")
            elif len(skeys)<len(ckeys):
                feedback.add_feedback("playeryear2rbis dictionary has too few keys.")
            else:
                feedback.add_feedback("playeryear2rbis dictionary has the correct number of keys.")

            feedback.finish(0,"The keys for playeryear2rbis are not correct.")

        for ckey in ckeys:
            if cplayeryear2rbis[ckey]!=playeryear2rbis[ckey]:
                feedback.finish(0,"Value for key %s is incorrect in playeryear2rbis." % str(ckey))

        feedback.add_feedback("playeryear2rbis is correct.")


        ckeys=list(cplayeryear2salary.keys())
        ckeys.sort(reverse=True)
        skeys=list(playeryear2salary.keys())
        skeys.sort(reverse=True)
        if skeys != ckeys:
            if len(skeys)>len(ckeys):
                feedback.add_feedback("playeryear2salary dictionary has too many keys.")
                feedback.add_feedback("Are you sure you skipped the header line?")
            elif len(skeys)<len(ckeys):
                feedback.add_feedback("playeryear2salary dictionary has too few keys.")
            else:
                feedback.add_feedback("playeryear2salary dictionary has the correct number of keys.")

            feedback.finish(0,"The keys for playeryear2salary are not correct.")

        for ckey in ckeys:
            if cplayeryear2salary[ckey]!=playeryear2salary[ckey]:
                feedback.finish(0,"Value for key %s is incorrect in playeryear2salary." % str(ckey))

        feedback.add_feedback("playeryear2salary is correct.")

        # Dictionaries are correct. Check lists
        if not type(salaries) is list:
            feedback.finish(0,"salaries must be a list.")
        if not type(rbis) is list:
            feedback.finish(0,"rbis must be a list.")
        if len(rbis)!=len(salaries):
            feedback.finish(0,"rbis and salaries must have the same length.")
        csalaries=[]
        crbis=[]
        for playeryear in cplayeryear2salary:
            if playeryear not in cplayeryear2rbis:
                continue
            salary=cplayeryear2salary[playeryear]
            rbi=cplayeryear2rbis[playeryear]
            csalaries.append(salary)
            crbis.append(rbi)

        ctuples=[x for x in zip(csalaries,crbis)]
        stuples=[x for x in zip(salaries,rbis)]

        if len(ctuples)!=len(stuples):
            if len(ctuples)>len(stuples):
                feedback.add_feedback("salaries and rbis have too few values.")
            else:
                feedback.add_feedback("salaries and rbis have too many values.")
            feedback.finish(0,"salaries and rbis have the wrong number of data points.")

        stuples.sort()
        ctuples.sort()

        if stuples!=ctuples:
            feedback.finish(0,"The data in salaries and/or rbis is incorrect.")

        feedback.add_feedback("You have read in all of the data correctly for plotting.")

        if not plt:
            feedback.finish(0,"You have no plot.")
        a=plt.gca()
        xlab=a.get_xaxis().get_label_text()
        ylab=a.get_yaxis().get_label_text()
        t=a.get_title()

        if xlab=='Salary' and ylab=='RBIs' and t=="Salary vs. RBIs in MLB":
            feedback.add_feedback("Your axes and title are labeled correctly.")
        else:
            feedback.finish(0,"Your axes and/or title are labeled incorrectly.")

        lines=a.get_lines()
        if len(lines)!=1:
            feedback.finish(0,"You should plot exactly 1 line.")
        line=lines[0]
        marker=line.get_marker()
        color=line.get_color()
        if marker=="." and color=="k":
            feedback.add_feedback("Your plot marker is correct.")
        else:
            feedback.finish(0,"Your plot marker is incorrect.")
        d=line.get_data()
        d[0].sort()
        d[1].sort()
        crbis.sort()
        csalaries.sort()
        if np.all(d[0]==np.asarray(csalaries)) and np.all(d[1]==np.asarray(crbis)):
            feedback.add_feedback("You plotted the correct data.")
        else:
            feedback.finish(0,"You've plotted incorrect data.")

        feedback.finish(1,"Congratulations! Your code passes all of our tests.")

    grade()

correct_code: |

    def read_salary(file_name):
        f=open(file_name)
        reader=csv.DictReader(f)
        player2salary={}
        for row in reader:
            playerid=row["playerID"]
            year=row["yearID"]
            salary=row["salary"]
            if salary.isdigit():
                t=(playerid,year)
                if t not in player2salary:
                    player2salary[t]=int(salary)
                else:
                    player2salary[t]+=int(salary)
        f.close()
        return player2salary
    
    def read_rbi(file_name):
        f=open(file_name)
        reader=csv.DictReader(f)
        player2RBI={}
        for row in reader:
            playerid=row["playerID"]
            year=row["yearID"]
            rbi=row["RBI"]
            if rbi.isdigit():
                t=(playerid,year)
                if t not in player2RBI:
                    player2RBI[t]=int(rbi)
                else:
                    player2RBI[t]+=int(rbi)
        f.close()
        return player2RBI
        
    salaries=[]
    rbis=[]
    playeryear2salary=read_salary("Salaries.csv")
    playeryear2rbi=read_rbi("Batting.csv")
    
    for playeryear in playeryear2salary:
        if playeryear not in playeryear2rbi:
            continue
        salary=playeryear2salary[playeryear]
        rbi=playeryear2rbi[playeryear]
        salaries.append(salary)
        rbis.append(rbi)
    
    plt.plot(salaries,rbis,'.')
    plt.xlabel("Salaries")
    plt.ylabel("RBIs")
    plt.title("Salariy vs. RBIs in MLB")
    plt.show()
