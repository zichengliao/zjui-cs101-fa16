type: PythonCodeQuestion
title: Baseball statistics
id: graph
value: 100
timeout: 10
data_files:

    - "media/batting.csv"

prompt: |
    # Introduction
    The Lahman Baseball Database is a comprehensive database of Major League baseball statistics. The journalist Sean Lahman provides all of this data freely to the public. We will make use of some of his data in this assignment. If you want to learn more about the database, you can click [here](http://www.seanlahman.com/baseball-archive/statistics/)

    We have provided you with a CSV file named [batting.csv](repocur:pdfs/batting.csv) that contains the annual batting performance data for all Major League Baseball players dating back to the year 1871. The first row in the file is a header indicating what data is stored in each column of the file. For example, column 12 is labeled "HR" and contains the home runs the player hit that year. Each of the next 99,846 lines contains a comma separated list of the data for that player and year. For example, the fifth line in the file indicates that a player with the id allisdo01 hit 2 homeruns in 1871.

    You should download [batting.csv](repocur:pdfs/batting.csv) and place it in the same directory as your Python code. Your job will be to write a Python program that finds the player id of the player with the highest total career RBIs of all time. *Caution!* Your program should work with any similarly formatted csv file.

    # Reading in the data
    First, you will need to read in the data file. You can do this by opening the file and iterating through each line using the "open" function. To parse the data contained in each line, you will need to use the "split" method. We are interested in two columns "playerID" and "RBI". Note: your program should skip the header in the file and completely ignore any lines where the RBI column does not contain a digit.

    You should create an accumulator dictionary called "career_rbis" that maps each player id string to an integer representing the total number of RBIs for that player. As you iterate through input the file, you should update the "career_rbis" dictionary.

    # Finding the most RBIs
    After reading in the data and generating the "career_rbis" dictionary, you can now iterate through the dictionary to find the player with the most career RBIs. *Hint:* You will need two accumulator variables to track both the most RBIs you've seen so far AND the player having that many RBIs. 

    Store an integer representing the highest number of RBIs in a variable named "max_rbis" and the corresponding player id string in a variable named "max_player".

    # Submitting your solution
    After you finish writing your code, you can paste it into the box below and click "Submit answer for feedback." You can do this as many times as you like. DO NOT try to write your code here. Debugging it will be very difficult. You should write and test your code on your own computer. Once you are satisfied with your feedback, you can click "Submit assignment" above to finalize your assignment.

setup_code: |
    def open(filename,mode="r"):
        try:
            data=data_files["media/"+filename]
        except KeyError:
            raise IOError("File not found")
        from io import StringIO
        return StringIO(data.decode("utf-8"))

names_for_user: [open]

names_from_user: [career_rbis,max_rbis,max_player]

test_code: |
    def load_data(input):
        career_rbis={}
        header=True
        for line in open(input):
            if header:
                    header=False
                    continue
            line=line.strip()
            split_line=line.split(",")
            batter_id=split_line[0]
            rbis=split_line[12]
            if not rbis.isdigit():
                    continue
            if batter_id not in career_rbis:
                    career_rbis[batter_id]=0
            career_rbis[batter_id]+=int(rbis)
        return career_rbis

    def grade():
        if not type(career_rbis) is dict:
            feedback.finish(0,"career_rbis must be a dictionary.")

        ccareer_rbis=load_data("batting.csv")
        ckeys=list(ccareer_rbis.keys())
        ckeys.sort(reverse=True)
        skeys=list(career_rbis.keys())
        skeys.sort(reverse=True)
        if skeys != ckeys:
            if len(skeys)>len(ckeys):
                feedback.add_feedback("career_rbis dictionary has too many keys.")
                feedback.add_feedback("Are you sure you skipped the header line?")
                feedback.add_feedback("Are you sure you skipped rows with invalid RBI data?")
            elif len(skeys)<len(ckeys):
                feedback.add_feedback("career_rbis dictionary has too few keys.")
            else:
                feedback.add_feedback("career_rbis dictionary has the correct number of keys.")

            feedback.finish(0,"The keys for career_rbis are not correct.")

        for ckey in ckeys:
            if ccareer_rbis[ckey]!=career_rbis[ckey]:
                feedback.finish(0,"Value for key %s is incorrect." % ckey)

        feedback.add_feedback("career_rbis is correct.")

        if not type(max_rbis) is int:
            feedback.finish(0,"max_rbis must be an integer.")

        if not type(max_player) is str:
            feedback.finish(0,"max_player must be a string.")

        if max_rbis != 2297:
            feedback.finish(0,"max_rbis has an incorrect value.")

        if max_player != "aaronha01":
            feedback.finish(0,"max_players has an incorrect value.")
            
        feedback.add_feedback("max_rbis and max_players are correct.")

        feedback.finish(1,"Congratulations! Your code passes all of our tests.")
    grade()

correct_code: |

    career_rbis={}
    header=True
    for line in open("batting.csv"):
            if header:
                    header=False
                    continue
            line=line.strip()
            split_line=line.split(",")
            batter_id=split_line[0]
            rbis=split_line[12]
            if not rbis.isdigit():
                    continue
            if batter_id not in career_rbis:
                    career_rbis[batter_id]=0
            career_rbis[batter_id]+=int(rbis)
    max_player=None
    max_rbis=0
    for batter in career_rbis:
        if career_rbis[batter]>max_rbis:
            max_player=batter
            max_rbis=career_rbis[batter] 
